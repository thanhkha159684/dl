<?php

function dl_core_menu() {
  $items = array();
  $items['get_current_cart_state'] = array(
    'title' => 'Xem giỏ hàng',
    'page callback' => 'dl_core_get_current_cart_state',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function dl_core_get_current_cart_state() {
   if (isset($_POST['cart_state'])) {
     print views_embed_view('commerce_cart_form');
   }
}
/* Hook block_info
 */
function dl_core_block_info() {
  return array(
    'user_hearder_block' => array(
      'info' => t("User Header Block"),
    ),
    'term_procduct_listing' => array(
      'info' => t("dl_core: Sản phẩm trong danh mục"),
    ),
    'product_related' => array(
      'info' => t("dl_core: Sản phẩm liên quan"),
    ),
  );
}
/* Hook block_info
 */
function dl_core_block_view($delta="") {
  $block = array();
  switch ($delta) {
    case "user_hearder_block":
    $block['content'] = iocare_core_user_header_block();
    break;
   case "term_procduct_listing":
    $term = menu_get_object('taxonomy_term',2);
    if (@$term->vocabulary_machine_name=='product_category') {
      clear_cache_form();
      $tree = array_keys(taxonomy_get_children($term->tid));
      $tree[] = $term->tid; 
      $block['content'] = '<h1 class="block-title">Sản phẩm trong danh mục '.mb_strtolower($term->name,'UTF-8').'</h1>'.views_embed_view('product_listing','block',implode('+',$tree));
    }
    break;
    case "product_related":
    $node = menu_get_object();
    if ($node && $node->type =="product") {
      if ($product = @$node->field_product['und'][0]['product_id']) {
        $product = commerce_product_load($product);
        if ($tid = @$product->field_product_categories['und'][0]['tid']) {
        $parent = array_keys(taxonomy_get_parents($tid));
        $tree = array_keys(taxonomy_get_children(reset($parent)));
        $tree[] = $tid;
        $block['content'] = '<h3 class="block-title">Sản phẩm liên quan</h3>'.views_embed_view('related_product','block',implode('+',$tree));
       }
      }
    }
    break;

    
    
  }
  return $block;
}
function dl_core_user_header_block() {
  global $user;
  if (user_is_logged_in()) {
    $html ='<ul class="user-header-block clearfix">
              <li class="logged"><a class="username" >'.$user->name.'</a>
                <div class="hidden">
                  <div class="user-logout"><a href="/user/logout">Logout</a></div>
                </div>
              </li>
            </ul>';
  } else {
       $html ='<ul class="user-header-block clearfix">
              <li><a href="/user">Login</a></li>
              <span class="separator align-middle"></span>
              <li><a href="/user/register">Signup</a></li>
              </ul>';
  }
  return $html;
}
/*
 * Hook form_alter
 */
function dl_core_form_alter(&$form,&$form_state,$form_id) {
  if ($form_id=="product_node_form") {
    $form['field_product']['und']['form']['title']['#access'] = false;
  }
}

function dl_core_views_data_alter(&$data){
  
}

function dl_core_form_commerce_cart_add_to_cart_form_alter(&$form, $form_state, $form_id) {
  $form['submit']['#ajax'] = array(
    'callback' => 'dl_core_ajax_cart_callback',
  );
}

function dl_core_ajax_cart_callback(&$form, &$form_state){
  global $user;
  $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);
  $commands = array();
 // $commands[] = ajax_command_replace('.' . drupal_html_class($form['#form_id']), drupal_render($form));
  $cart = module_invoke('commerce_cart','block_view','cart');
  //module_load_include('inc','commerce_cart','pages');
  $cart_form = dl_core_commerce_cart_view();
  $commands[] = ajax_command_replace('.cart-contents',$cart['content']);
  //$commands[] = ajax_command_prepend('.cart-contents', theme('status_messages'));
  $commands[] = array(
  	'command' => 'showcolorbox',
  	'data'    => theme('status_messages').$cart_form, 
  );
  return array('#type' => 'ajax', '#commands' => $commands);
}

 function dl_core_commerce_cart_view() {
  global $user;

  // Default to displaying an empty message.
  $content = theme('commerce_cart_empty_page');

  // First check to make sure we have a valid order.
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Only show the cart form if we found product line items.
    if (commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()) > 0) {

      // Add the form for editing the cart contents.
      $content = commerce_embed_view('commerce_cart_form', 'default', array($order->order_id), 'cart');
    }
  }

  return $content;
}



/*
 * Homepage:remove temr root empty
 */
function dl_core_check_root_term_empty_product(&$data){
  
  if(isset($data->views_field_view_view) && isset($data->taxonomy_term_data_name)) {
    print l($data->taxonomy_term_data_name,'taxonomy/term/'.$data->tid,array('attributes'=>array('class'=>"block-title"))).$data->views_field_view_view;
  } else {
    print "";
  }
  
  
}

function clear_cache_form() {
  $form = db_query("SELECT COUNT(cid) as count FROM {cache_form}");
    foreach( $form as $item) {
      if ($item->count > 2000) {
        db_query("DELETE FROM {cache_form} WHERE 1");     
      }
    }
}
